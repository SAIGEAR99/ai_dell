import { GoogleGenerativeAI } from "@google/generative-ai";
import OpenAI from "openai";
import dotenv from "dotenv";
import fs from "fs/promises";
import path from "path";

// --- SETUP & HELPER FUNCTIONS (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°) ---
dotenv.config();
// ... (‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°) ...
const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);
const deepseek = new OpenAI({
  apiKey: process.env.DEEPSEEK_API_KEY,
  baseURL: "https://api.deepseek.com/v1"
});
const dellDatabasePath = path.join(process.cwd(), "data", "dellpro_laptop_desktop_merged.json");
const rawDellDatabase = JSON.parse(await fs.readFile(dellDatabasePath, "utf-8"));
console.log(`‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô, ‡∏û‡∏ö ${Object.keys(rawDellDatabase).length} ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î`);
async function extractHardRequirements(torContent) {
  console.log("\n[‡∏î‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡πà 0.1] üöÄ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏Å‡∏±‡∏î '‡∏Å‡∏é' ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô...");
  const prompt = `
    ‡∏à‡∏≤‡∏Å TOR ‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ ‡πÉ‡∏´‡πâ‡∏™‡∏Å‡∏±‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
    - min_ram_gb (‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç)
    - cpu_family (‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡πâ‡∏ô‡πÜ ‡πÄ‡∏ä‡πà‡∏ô "Core Ultra 5", "Ryzen 7")
    - gpu_required (boolean)
    - display_size_inches (‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç)
    - keywords (Array ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≥‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Ç‡∏ô‡∏≤‡∏î‡∏à‡∏≠)
    TOR: --- ${torContent} ---
    JSON Output:
  `;
  try {
    const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash-latest" });
    const result = await model.generateContent(prompt);
    const requirements = JSON.parse(result.response.text().replace(/```json|```/g, "").trim());
    console.log("‚úÖ ‡πÑ‡∏î‡πâ‡∏Å‡∏é‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô:", JSON.stringify(requirements));
    return requirements;
  } catch (e) { console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏Å‡∏±‡∏î‡∏Å‡∏é:", e); return null; }
}
function getScreenSizeFromName(modelName) {
    if (!modelName) return null;
    const match = modelName.match(/\b(13|14|15|16|24|27)\b/);
    return match ? parseInt(match[1], 10) : null;
}
function calculateMatchScore(pc, requirements) {
    let score = 0;
    const log = [];
    const specs = pc.specifications;
    if (!specs || !requirements) return { score: 0, log: ["No specs or requirements"] };
    const pcJsonString = JSON.stringify(pc).toLowerCase();
    if (requirements.display_size_inches) {
        const sizeFromName = getScreenSizeFromName(pc.model_name);
        if (sizeFromName && sizeFromName === requirements.display_size_inches) {
            score += 40; log.push(`+40: Screen(${sizeFromName}")`);
        } else { score -= 60; log.push(`-60: Screen mismatch (Req: ${requirements.display_size_inches}, Found: ${sizeFromName || 'N/A'})`); }
    }
    if (requirements.cpu_family) {
        if ((specs.processor || []).some(p => p.type.toLowerCase().includes(requirements.cpu_family.toLowerCase()))) {
            score += 50; log.push("+50: CPU");
        } else { score -= 50; log.push("-50: CPU"); }
    }
    if (requirements.min_ram_gb) {
        const pcMaxRam = parseInt(specs.memory?.max_configuration?.match(/\d+/)?.[0] || '0');
        if (pcMaxRam >= requirements.min_ram_gb) {
            score += 20; log.push("+20: RAM");
            const bonus = Math.min(20, (pcMaxRam / requirements.min_ram_gb - 1) * 10);
            if (bonus > 0) { score += bonus; log.push(`+${bonus.toFixed(0)}: RAM bonus`); }
        } else { score -= 30; log.push("-30: RAM"); }
    }
    const hasDiscreteGPU = !!specs.gpu?.discrete;
    if (requirements.gpu_required === true) {
        if (hasDiscreteGPU) { score += 15; log.push("+15: dGPU");
        } else { score -= 25; log.push("-25: dGPU"); }
    } else if (requirements.gpu_required === false) {
        if (hasDiscreteGPU) { score -= 10; log.push("-10: dGPU");
        } else { score += 5; log.push("+5: dGPU"); }
    }
    if (requirements.keywords?.length > 0) {
        let keywordMatches = 0;
        requirements.keywords.forEach(kw => {
            if (pcJsonString.includes(kw.toLowerCase())) {
                keywordMatches++; score += 5;
            }
        });
        if (keywordMatches > 0) { log.push(`+${keywordMatches * 5}: Keywords`); }
    }
    return { model_name: pc.model_name, score, log, pc };
}
async function aiRefinedFilter(torContent, candidates) {
    console.log(`\n[‡∏î‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡πà 1] ü§ñ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏£‡∏≠‡∏á‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏î‡πâ‡∏ß‡∏¢ Gemini 1.5 Flash (${candidates.length} ‡∏£‡∏∏‡πà‡∏ô)...`);
    if (candidates.length === 0) return [];
    const NUM_TO_SELECT = 3;
    const prompt = `‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠ Presales Engineer ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß
      **TOR ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤:**
      ---
      ${torContent}
      ---
      **‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå (Candidates) ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ:**
      ${JSON.stringify(candidates.map(c => ({model_name: c.model_name, score: c.score, key: Object.keys(rawDellDatabase).find(key => rawDellDatabase[key].model_name === c.model_name)})))}
      
      **‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πÄ‡∏õ‡∏Ñ‡πÄ‡∏ï‡πá‡∏°:**
      ${JSON.stringify(candidates.map(c => c.pc), null, 2)}
      
      **‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á:**
      ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏•‡∏∞‡∏Ñ‡∏±‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏∏‡πà‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏Å‡∏±‡∏ö TOR ‡∏à‡∏≤‡∏Å‡∏•‡∏¥‡∏™‡∏ï‡πå‡∏ô‡∏µ‡πâ
      **‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô JSON Array ‡∏ó‡∏µ‡πà‡∏°‡∏µ "key" ‡∏Ç‡∏≠‡∏á ${NUM_TO_SELECT} ‡∏£‡∏∏‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏à‡∏≤‡∏Å‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÑ‡∏õ‡∏ô‡πâ‡∏≠‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î**
      ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏£‡∏∏‡πà‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ ${NUM_TO_SELECT} ‡∏£‡∏∏‡πà‡∏ô ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ó‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ ‡πÅ‡∏ï‡πà‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ ${NUM_TO_SELECT} ‡∏£‡∏∏‡πà‡∏ô‡πÄ‡∏™‡∏°‡∏≠
      
      JSON Output:
    `;
    try {
        const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash-latest" });
        const result = await model.generateContent(prompt);
        const responseText = result.response.text().replace(/```json|```/g, "").trim();
        const modelKeys = JSON.parse(responseText);
        console.log(`‚úÖ ‡∏Å‡∏£‡∏≠‡∏á‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏î‡πâ‡∏ß‡∏¢ AI: ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ${modelKeys.length} ‡∏£‡∏∏‡πà‡∏ô`);
        return modelKeys.map(key => rawDellDatabase[key]).filter(Boolean);
    } catch (e) {
        console.error(`‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏î‡πà‡∏≤‡∏ô AI Refined Filter:`, e);
        return candidates.slice(0, 3).map(c => c.pc);
    }
}

// --- STAGE 2 & 3: CROSS-VALIDATION & ARBITRATION (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç getInitialRecommendations) ---
async function getInitialRecommendations(torContent, candidates) {
    console.log(`\n[‡∏î‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡πà 2] üïµÔ∏è‚Äç‚ôÇÔ∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á ${candidates.length} ‡∏£‡∏∏‡πà‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡πÉ‡∏´‡πâ AI 2 ‡∏ï‡∏±‡∏ß‡∏ä‡πà‡∏ß‡∏¢‡∏Å‡∏±‡∏ô‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ö‡∏ö‡∏°‡∏µ‡∏´‡∏•‡∏±‡∏Å‡∏Å‡∏≤‡∏£...`);

    // --- PROMPT ‡∏â‡∏ö‡∏±‡∏ö‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡∏°‡πà ---
    const prompt = `
    ‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏î‡πâ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏ã‡∏∑‡πâ‡∏≠‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏™‡∏π‡∏á ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏∏‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î 1 ‡∏£‡∏∏‡πà‡∏ô‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ

    **‡∏´‡∏•‡∏±‡∏Å‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à (Decision Principles):**
    1.  **Hard Constraints:** ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡πÄ‡∏ä‡πà‡∏ô **"‡∏Ç‡∏ô‡∏≤‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠"** ‡∏ñ‡∏∑‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î ‡∏´‡∏≤‡∏Å TOR ‡∏£‡∏∞‡∏ö‡∏∏‡∏Ç‡∏ô‡∏≤‡∏î‡∏à‡∏≠‡∏°‡∏≤ ‡∏£‡∏∏‡πà‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏ï‡∏≤‡∏°‡∏Ç‡∏ô‡∏≤‡∏î‡∏à‡∏≠‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
    2.  **Soft Constraints:** ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡∏ó‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û ‡πÄ‡∏ä‡πà‡∏ô "‡∏£‡∏∏‡πà‡∏ô CPU" ‡∏´‡∏£‡∏∑‡∏≠ "‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß RAM" ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô‡πÑ‡∏î‡πâ ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏£‡∏∏‡πà‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏î‡∏µ‡∏Å‡∏ß‡πà‡∏≤ ‡∏Å‡πá‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ
    3.  **Holistic View:** ‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡∏≠‡∏¢‡πà‡∏≤‡πÉ‡∏´‡πâ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏Å‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡πÉ‡∏î‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏°‡∏≤‡∏Å‡∏à‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ‡∏à‡∏ô‡∏°‡∏≠‡∏á‡∏Ç‡πâ‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏ö‡∏Å‡∏û‡∏£‡πà‡∏≠‡∏á‡∏£‡πâ‡∏≤‡∏¢‡πÅ‡∏£‡∏á‡πÉ‡∏ô‡∏î‡πâ‡∏≤‡∏ô‡∏≠‡∏∑‡πà‡∏ô

    **‡πÇ‡∏à‡∏ó‡∏¢‡πå (TOR):**
    ---
    ${torContent}
    ---

    **‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (Candidates):**
    ${JSON.stringify(candidates.map(c=>c.model_name))}
    ---
    
    **‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πÄ‡∏õ‡∏Ñ‡πÄ‡∏ï‡πá‡∏°:**
    ${JSON.stringify(candidates, null, 2)}
    ---

    **‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á:**
    ‡∏à‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ï‡∏≤‡∏°‡∏´‡∏•‡∏±‡∏Å‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≤‡∏á‡∏ï‡πâ‡∏ô ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏∏‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏°‡∏≤ 1 ‡∏£‡∏∏‡πà‡∏ô ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ß‡πà‡∏≤‡∏ó‡∏≥‡πÑ‡∏°‡∏ñ‡∏∂‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏∏‡πà‡∏ô‡∏ô‡∏µ‡πâ ‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡πÑ‡∏°‡∏£‡∏∏‡πà‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡∏ñ‡∏∂‡∏á‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤

    **‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö:**
    ‡∏ä‡∏∑‡πà‡∏≠‡∏£‡∏∏‡πà‡∏ô: [Model Name]
    ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•: [Your detailed reasoning, explaining how you prioritized the requirements]`;
    
    const [geminiResult, deepseekResult] = await Promise.all([
      genAI.getGenerativeModel({ model: "gemini-1.5-flash-latest" }).generateContent(prompt),
      deepseek.chat.completions.create({ model: "deepseek-chat", messages: [{ role: "user", content: prompt }] }),
    ]);
    console.log("‚úÖ AI ‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô");
    return {
      gemini_recommendation: geminiResult.response.text(),
      deepseek_recommendation: deepseekResult.choices[0].message.content,
    };
}

async function getFinalDecision(initialRecommendations, torContent) {
    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏° ‡πÅ‡∏ï‡πà‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö Input ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô
    console.log("\n[‡∏î‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡πà 3] üèõÔ∏è AI ‡πÄ‡∏´‡πá‡∏ô‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô! ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ DeepSeek ‡∏ä‡πà‡∏ß‡∏¢‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡∏ä‡∏µ‡πâ‡∏Ç‡∏≤‡∏î...");
    const arbiterPrompt = `‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡∏ù‡πà‡∏≤‡∏¢‡∏à‡∏±‡∏î‡∏ã‡∏∑‡πâ‡∏≠ ‡∏à‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö TOR ‡πÅ‡∏•‡πâ‡∏ß "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡πÅ‡∏•‡∏∞‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î" ‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏´‡∏ô‡∏∂‡πà‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß.
        TOR: ${torContent}
        ---
        ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ó‡∏µ‡πà 1 (‡∏à‡∏≤‡∏Å Gemini):
        ${initialRecommendations.gemini_recommendation}
        ---
        ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ó‡∏µ‡πà 2 (‡∏à‡∏≤‡∏Å DeepSeek):
        ${initialRecommendations.deepseek_recommendation}
        ---
        ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö: ‡πÉ‡∏´‡πâ‡∏£‡∏∞‡∏ö‡∏∏ "‡∏ä‡∏∑‡πà‡∏≠‡∏£‡∏∏‡πà‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å" ‡πÅ‡∏•‡∏∞ "‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•"`;
    const result = await deepseek.chat.completions.create({
        model: "deepseek-chat",
        messages: [{ role: "user", content: arbiterPrompt }],
    });
    console.log("‚úÖ ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î");
    return result.choices[0].message.content;
}

/**
 * Main Orchestrator
 */
async function main() {
  try {
    const torPath = path.join(process.cwd(), "data", "tor.txt");
    const torContent = await fs.readFile(torPath, "utf-8");
    console.log("--- üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£ RAG ‡πÅ‡∏ö‡∏ö Smart Scoring (v4) ---");

    const requirements = await extractHardRequirements(torContent);
    if (!requirements) return;
    
    console.log("\n[‡∏î‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡πà 0.2] üìà ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏ó‡∏∏‡∏Å‡∏£‡∏∏‡πà‡∏ô...");
    const allScoredModels = Object.values(rawDellDatabase).map(pc => calculateMatchScore(pc, requirements));
    allScoredModels.sort((a, b) => b.score - a.score);

    const TOP_N_CANDIDATES = 6;
    let candidates = allScoredModels.slice(0, TOP_N_CANDIDATES);

    if (candidates.length === 0 || candidates[0].score <= 0) { 
        console.log("\n‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏∏‡πà‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏ß‡∏Å‡πÄ‡∏•‡∏¢, ‡∏≠‡∏≤‡∏à‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á TOR ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏é‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô"); 
        return; 
    }
    console.log(`‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô, ‡∏Ñ‡∏±‡∏î ${TOP_N_CANDIDATES} ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÅ‡∏£‡∏Å:`);
    candidates.forEach((c, index) => {
        console.log(`   #${index + 1}: ${c.model_name} (Score: ${c.score}, Log: [${c.log.join(' | ')}])`);
    });

    let finalCandidates = await aiRefinedFilter(torContent, candidates);
    if (finalCandidates.length === 0) { 
        console.log("\nAI ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏±‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏∏‡πà‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡πÑ‡∏î‡πâ, ‡πÉ‡∏ä‡πâ Top 3 ‡∏à‡∏≤‡∏Å Score ‡πÅ‡∏ó‡∏ô...");
        finalCandidates = candidates.slice(0, 3).map(c => c.pc);
    }
    console.log("‡∏£‡∏∏‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏î‡πà‡∏≤‡∏ô 1 (Final Candidates):", finalCandidates.map(c => c.model_name));
    
    const initialRecs = await getInitialRecommendations(torContent, finalCandidates);
    const extractModelName = (recommendation) => (recommendation.match(/‡∏ä‡∏∑‡πà‡∏≠‡∏£‡∏∏‡πà‡∏ô:\s*(.*)/i) || [])[1]?.trim();
    const geminiModelName = extractModelName(initialRecs.gemini_recommendation);
    const deepseekModelName = extractModelName(initialRecs.deepseek_recommendation);
    
    let finalAnswer;
    
    if (geminiModelName && deepseekModelName && geminiModelName === deepseekModelName) {
        console.log("\n[‡∏î‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡πà 3] ‚úÖ AI ‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡πÄ‡∏´‡πá‡∏ô‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô!");
        finalAnswer = `**‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏≠‡∏Å‡∏â‡∏±‡∏ô‡∏ó‡πå:**\n\n${initialRecs.gemini_recommendation}`;
    } else {
        finalAnswer = await getFinalDecision(initialRecs, torContent);
    }

    console.log("\n\n--- üåü ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢ (Final Decision) üåü ---");
    console.log(finalAnswer);

  } catch (error) {
    console.error(`\n--- ‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡πâ‡∏≤‡∏¢‡πÅ‡∏£‡∏á‡πÉ‡∏ô‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏´‡∏•‡∏±‡∏Å ---`, error);
  } finally {
    console.log("\n--- ‚úÖ ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£ ---");
  }
}

main();