import { GoogleGenerativeAI } from "@google/generative-ai";
import OpenAI from "openai";
import dotenv from "dotenv";
import fs from "fs/promises";
import path from "path";

// --- 1. SETUP: ‡πÇ‡∏´‡∏•‡∏î API Keys ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ---
dotenv.config();

if (!process.env.GEMINI_API_KEY || !process.env.DEEPSEEK_API_KEY) {
  console.error("Error: ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ GEMINI_API_KEY ‡πÅ‡∏•‡∏∞ DEEPSEEK_API_KEY ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå .env");
  process.exit(1);
}

const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);
const deepseek = new OpenAI({
  apiKey: process.env.DEEPSEEK_API_KEY,
  baseURL: "https://api.deepseek.com/v1"
});

const dellDatabasePath = path.join(process.cwd(), "data", "dellpro_laptop_desktop_merged.json");
const rawDellDatabase = JSON.parse(await fs.readFile(dellDatabasePath, "utf-8"));
console.log(`‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô, ‡∏û‡∏ö ${Object.keys(rawDellDatabase).length} ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î`);


// --- STAGE 0: HARDWARE REQUIREMENT EXTRACTION & PROGRAMMATIC FILTER ---
async function extractHardRequirements(torContent) {
  console.log("\n[‡∏î‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡πà 0.1] üöÄ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏Å‡∏±‡∏î '‡∏Å‡∏é' ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á‡∏î‡πâ‡∏ß‡∏¢‡πÇ‡∏Ñ‡πâ‡∏î...");
  const prompt = `
    ‡∏à‡∏≤‡∏Å TOR ‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ ‡πÉ‡∏´‡πâ‡∏™‡∏Å‡∏±‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô
    - min_ram_gb (‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç)
    - min_storage_gb (‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç)
    - cpu_family (‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡πâ‡∏ô‡πÜ ‡πÄ‡∏ä‡πà‡∏ô "Core Ultra 5", "Ryzen 7")
    - display_size_inches (‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç)
    - gpu_required (boolean, true ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏∏‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏à‡∏≠‡πÅ‡∏¢‡∏Å)
    - keywords (Array ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≥‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÄ‡∏ä‡πà‡∏ô ["magnesium", "sim card", "fingerprint"])
    ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ null ‡∏´‡∏£‡∏∑‡∏≠ false.
    TOR: --- ${torContent} ---
    JSON Output:
  `;
  try {
    const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash-latest" });
    const result = await model.generateContent(prompt);
    const requirements = JSON.parse(result.response.text().replace(/```json|```/g, "").trim());
    console.log("‚úÖ ‡πÑ‡∏î‡πâ‡∏Å‡∏é‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏≠‡∏á:", JSON.stringify(requirements));
    return requirements;
  } catch (e) {
    console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏Å‡∏±‡∏î‡∏Å‡∏é:", e);
    return null;
  }
}

function programmaticFilter(requirements, database) {
  console.log("\n[‡∏î‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡πà 0.2] ‚öôÔ∏è  ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏£‡∏≠‡∏á‡∏î‡πâ‡∏ß‡∏¢‡πÇ‡∏Ñ‡πâ‡∏î (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ Token)...");
  if (!requirements) return Object.values(database);
  
  const candidates = Object.values(database).filter(pc => {
    const specs = pc.specifications;
    if (!specs) return false;

    if (requirements.min_ram_gb && (parseInt(specs.memory?.max_configuration?.match(/\d+/)?.[0] || '0') < requirements.min_ram_gb)) return false;
    if (requirements.gpu_required === true && !specs.gpu?.discrete) return false;
    if (requirements.cpu_family && !(specs.processor || []).some(p => p.type.toLowerCase().includes(requirements.cpu_family.toLowerCase()))) return false;
    if (requirements.keywords?.length > 0) {
        const pcJsonString = JSON.stringify(pc).toLowerCase();
        if (!requirements.keywords.every(kw => pcJsonString.includes(kw.toLowerCase()))) return false;
    }
    return true;
  });

  console.log(`‚úÖ ‡∏Å‡∏£‡∏≠‡∏á‡∏î‡πâ‡∏ß‡∏¢‡πÇ‡∏Ñ‡πâ‡∏î: ‡∏à‡∏≤‡∏Å ${Object.keys(database).length} ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ${candidates.length} ‡∏£‡∏∏‡πà‡∏ô`);
  return candidates;
}

// --- STAGE 1 & 2: AI-ASSISTED FILTERING (REUSABLE FUNCTION) ---
async function aiFilter(torContent, candidates, modelName, stageName) {
    console.log(`\n[${stageName}] ü§ñ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏£‡∏≠‡∏á‡∏î‡πâ‡∏ß‡∏¢ ${modelName} (${candidates.length} ‡∏£‡∏∏‡πà‡∏ô)...`);
    if (candidates.length === 0) return [];

    const prompt = `
      ‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠ Presales Engineer ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß
      **TOR ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤:**
      ---
      ${torContent}
      ---
      **‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå (Candidates):**
      ${JSON.stringify(candidates.map(c => ({model_name: c.model_name, key: Object.keys(rawDellDatabase).find(key => rawDellDatabase[key].model_name === c.model_name)})))}
      
      **‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πÄ‡∏õ‡∏Ñ‡πÄ‡∏ï‡πá‡∏°:**
      ${JSON.stringify(candidates, null, 2)}
      
      **‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á:**
      ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏•‡∏∞‡∏Ñ‡∏±‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏∏‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö TOR ‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
      ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô JSON Array ‡∏Ç‡∏≠‡∏á "key" ‡∏Ç‡∏≠‡∏á‡∏£‡∏∏‡πà‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
      
      JSON Output:
    `;

    try {
        const model = genAI.getGenerativeModel({ model: modelName });
        const result = await model.generateContent(prompt);
        const responseText = result.response.text().replace(/```json|```/g, "").trim();
        const modelKeys = JSON.parse(responseText);
        console.log(`‚úÖ ${stageName}: ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ${modelKeys.length} ‡∏£‡∏∏‡πà‡∏ô`);
        return modelKeys.map(key => rawDellDatabase[key]).filter(Boolean);
    } catch (e) {
        console.error(`‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô ${stageName}:`, e);
        return candidates; // ‡∏ñ‡πâ‡∏≤ error ‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏¥‡∏°‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
    }
}


// --- STAGE 3 & 4: CROSS-VALIDATION & ARBITRATION ---
async function getInitialRecommendations(torContent, candidates) {
    console.log(`\n[‡∏î‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡πà 3] üïµÔ∏è‚Äç‚ôÇÔ∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á ${candidates.length} ‡∏£‡∏∏‡πà‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡πÉ‡∏´‡πâ AI 2 ‡∏ï‡∏±‡∏ß‡∏ä‡πà‡∏ß‡∏¢‡∏Å‡∏±‡∏ô‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå...`);
    // ... (‡πÇ‡∏Ñ‡πâ‡∏î‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏° ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç) ...
    const prompt = `‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏∏‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î 1 ‡∏£‡∏∏‡πà‡∏ô‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏ï‡∏≤‡∏° TOR ‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î:
    TOR: ${torContent}
    Candidates: ${JSON.stringify(candidates.map(c=>c.model_name))}
    ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ï‡πá‡∏°: ${JSON.stringify(candidates, null, 2)}
    
    ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö:
    ‡∏ä‡∏∑‡πà‡∏≠‡∏£‡∏∏‡πà‡∏ô: [Model Name]
    ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•: [Your reason]`;

    const [geminiResult, deepseekResult] = await Promise.all([
      genAI.getGenerativeModel({ model: "gemini-1.5-flash-latest" }).generateContent(prompt),
      deepseek.chat.completions.create({ model: "deepseek-chat", messages: [{ role: "user", content: prompt }] }),
    ]);
    console.log("‚úÖ AI ‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô");
    return {
      gemini_recommendation: geminiResult.response.text(),
      deepseek_recommendation: deepseekResult.choices[0].message.content,
    };
}

async function getFinalDecision(initialRecommendations, torContent) {
    console.log("\n[‡∏î‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡πà 4] üèõÔ∏è AI ‡πÄ‡∏´‡πá‡∏ô‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô! ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ DeepSeek ‡∏ä‡πà‡∏ß‡∏¢‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡∏ä‡∏µ‡πâ‡∏Ç‡∏≤‡∏î...");
    // ... (‡πÇ‡∏Ñ‡πâ‡∏î‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏° ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç) ...
     const arbiterPrompt = `‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡∏ù‡πà‡∏≤‡∏¢‡∏à‡∏±‡∏î‡∏ã‡∏∑‡πâ‡∏≠ ‡∏à‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö TOR ‡πÅ‡∏•‡πâ‡∏ß "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡πÅ‡∏•‡∏∞‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î" ‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏´‡∏ô‡∏∂‡πà‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß.
        TOR: ${torContent}
        ---
        ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ó‡∏µ‡πà 1 (‡∏à‡∏≤‡∏Å Gemini):
        ${initialRecommendations.gemini_recommendation}
        ---
        ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ó‡∏µ‡πà 2 (‡∏à‡∏≤‡∏Å DeepSeek):
        ${initialRecommendations.deepseek_recommendation}
        ---
        ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö: ‡πÉ‡∏´‡πâ‡∏£‡∏∞‡∏ö‡∏∏ "‡∏ä‡∏∑‡πà‡∏≠‡∏£‡∏∏‡πà‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å" ‡πÅ‡∏•‡∏∞ "‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•"`;

    const result = await deepseek.chat.completions.create({
        model: "deepseek-chat",
        messages: [{ role: "user", content: arbiterPrompt }],
    });
    console.log("‚úÖ ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î");
    return result.choices[0].message.content;
}

/**
 * Main Orchestrator
 */
async function main() {
  try {
    const torPath = path.join(process.cwd(), "data", "tor.txt");
    const torContent = await fs.readFile(torPath, "utf-8");
    console.log("--- üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£ RAG ‡πÅ‡∏ö‡∏ö Ultimate 5-Stage ---");

    // ‡∏î‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡πà 0
    const hardRequirements = await extractHardRequirements(torContent);
    let candidates = programmaticFilter(hardRequirements, rawDellDatabase);
    if (candidates.length === 0) { console.log("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏∏‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á‡∏î‡πâ‡∏ß‡∏¢‡πÇ‡∏Ñ‡πâ‡∏î"); return; }
    console.log("‡∏£‡∏∏‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏î‡πà‡∏≤‡∏ô 0:", candidates.map(c => c.model_name));

    // ‡∏î‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡πà 1
    candidates = await aiFilter(torContent, candidates, "gemini-1.0-pro", "‡∏î‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡πà 1: Broad AI Filter");
    if (candidates.length === 0) { console.log("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏∏‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á‡∏î‡πâ‡∏ß‡∏¢ Gemini 1.0 Pro"); return; }
    console.log("‡∏£‡∏∏‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏î‡πà‡∏≤‡∏ô 1:", candidates.map(c => c.model_name));
    
    // ‡∏î‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡πà 2
    candidates = await aiFilter(torContent, candidates, "gemini-1.5-flash-latest", "‡∏î‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡πà 2: Refined AI Filter");
    if (candidates.length === 0) { console.log("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏∏‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á‡∏î‡πâ‡∏ß‡∏¢ Gemini 1.5 Flash"); return; }
    console.log("‡∏£‡∏∏‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏î‡πà‡∏≤‡∏ô 2 (Final Candidates):", candidates.map(c => c.model_name));

    // ‡∏î‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡πà 3
    const initialRecs = await getInitialRecommendations(torContent, candidates);
    const extractModelName = (recommendation) => (recommendation.match(/‡∏ä‡∏∑‡πà‡∏≠‡∏£‡∏∏‡πà‡∏ô:\s*(.*)/i) || [])[1]?.trim();
    const geminiModelName = extractModelName(initialRecs.gemini_recommendation);
    const deepseekModelName = extractModelName(initialRecs.deepseek_recommendation);
    
    let finalAnswer;

    // ‡∏î‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡πà 4
    if (geminiModelName && deepseekModelName && geminiModelName === deepseekModelName) {
        console.log("\n[‡∏î‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡πà 4] ‚úÖ AI ‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡πÄ‡∏´‡πá‡∏ô‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô!");
        finalAnswer = `**‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏≠‡∏Å‡∏â‡∏±‡∏ô‡∏ó‡πå:**\n\n${initialRecs.gemini_recommendation}`;
    } else {
        finalAnswer = await getFinalDecision(initialRecs, torContent);
    }

    console.log("\n\n--- üåü ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢ (Final Decision) üåü ---");
    console.log(finalAnswer);

  } catch (error) {
    console.error(`\n--- ‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡πâ‡∏≤‡∏¢‡πÅ‡∏£‡∏á‡πÉ‡∏ô‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏´‡∏•‡∏±‡∏Å ---`, error);
  } finally {
    console.log("\n--- ‚úÖ ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£ ---");
  }
}

main();